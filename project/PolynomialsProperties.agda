open import Ring
import RingProperties
import Polynomials

open import Data.Empty   using (‚ä•; ‚ä•-elim)
open import Data.Maybe   using (Maybe; nothing; just)
open import Data.Maybe.Properties using (just-injective)
open import Data.Nat     using (‚Ñï; zero; suc; _‚â§_; z‚â§n; s‚â§s; _<_) renaming (_+_ to _+‚Åø_; _*_ to _*‚Åø_)

import Relation.Binary.PropositionalEquality as Eq
open Eq                  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst; [_]; inspect)
open Eq.‚â°-Reasoning      using (begin_; _‚â°‚ü®‚ü©_; step-‚â°; _‚àé)

module PolynomialsProperties (A : Ring) where

  open Ring.Ring A renaming (ùüò to ùüò·µ£; ùüô to ùüô·µ£; _+_ to _+·µ£_; _¬∑_ to _¬∑·µ£_; -_ to -·µ£_ ;ùüô‚â†ùüò to ùüô·µ£‚â†ùüò·µ£; ùüô-left to ùüô·µ£-left; ¬∑-comm to ¬∑·µ£-comm)
  open RingProperties {A}

  open Polynomials A

  dcong : ‚àÄ {A : Set} {B : A ‚Üí Set} (f : (x : A) ‚Üí B x) {x y}
        ‚Üí (p : x ‚â° y) ‚Üí subst B p (f x) ‚â° f y
  dcong f refl = refl

  dcong‚ÇÇ : ‚àÄ {A : Set} {B : A ‚Üí Set} {C : Set}
          (f : (x : A) ‚Üí B x ‚Üí C) {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ}
        ‚Üí (p : x‚ÇÅ ‚â° x‚ÇÇ) ‚Üí subst B p y‚ÇÅ ‚â° y‚ÇÇ
        ‚Üí f x‚ÇÅ y‚ÇÅ ‚â° f x‚ÇÇ y‚ÇÇ
  dcong‚ÇÇ f refl refl = refl
  justnoth‚ä• : {X : Set}{x : X} ‚Üí  nothing ‚â° just x ‚Üí ‚ä•
  justnoth‚ä• ()
  ¬¨-elim : ‚àÄ {A : Set}
    ‚Üí ¬¨ A
    ‚Üí A
      ---
    ‚Üí ‚ä•
  ¬¨-elim ¬¨x x = ¬¨x x


-- ////////////  ADDITION - commutativity ////////////
  addp-comm :  (p q : NonZeroPoly ) ‚Üí addp p q ‚â° addp q p 
  addp-comm (ld a a‚â†0) (ld b b‚â†0) with ( dec  (a +·µ£ b) ùüò·µ£) | inspect ( dec (a +·µ£ b) ) ùüò·µ£
  ... | no a+b‚â†0 | [ eq ] with dec (b +·µ£ a) ùüò·µ£
  ... | no b+a‚â†0 =  cong just (dcong‚ÇÇ ld (((+-comm ) a b)) refl) 
  ... | yes b+a=0 with a+b‚â†0 (a+b=b+a=e b a b+a=0)
  ... | ()
  addp-comm (ld a a‚â†0) (ld b b‚â†0) | yes a+b=0 | [ eq ] with ( dec  (b +·µ£ a) ùüò·µ£) | inspect ( dec (b +·µ£ a) ) ùüò·µ£
  ... | yes b+a=0 | [ eq ] = refl
  ... | no b+a‚â†0 | [ eq ] with ¬¨-elim b+a‚â†0 (a+b=b+a=e a b a+b=0)
  ... | ()
  addp-comm  (ld a a‚â†0) (hq ‚à∑‚Çö tq) = cong just refl
  addp-comm  (hp ‚à∑‚Çö tp) (ld a a‚â†0) = cong just refl
  addp-comm  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) with addp tp tq | inspect (addp tp) tq | addp tq tp | inspect (addp tq) tp
  ... | just tp+tq | [ eq‚ÇÅ ] | just tq+tp | [ eq‚ÇÇ ] = cong just (cong‚ÇÇ _‚à∑‚Çö_ ((+-comm ) hp hq) (hlp (x=yjust eq‚ÇÇ eq‚ÇÅ)))
    where 
      x=yjust : addp tq tp ‚â° just tq+tp ‚Üí addp tp tq ‚â° just tp+tq ‚Üí just tp+tq ‚â° just tq+tp 
      x=yjust p1 p2 = begin just tp+tq  
                                      ‚â°‚ü® sym p2 ‚ü©
                            addp tp tq 
                                      ‚â°‚ü® addp-comm tp tq ‚ü©
                            addp tq tp 
                                      ‚â°‚ü® p1 ‚ü©
                            just tq+tp ‚àé
      hlp : just tp+tq ‚â° just tq+tp ‚Üí tp+tq ‚â° tq+tp 
      hlp refl = refl

  ... | just tp+tq | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] with justnoth‚ä• (trans (sym eq‚ÇÇ) (trans  (addp-comm tq tp) eq‚ÇÅ))
  ... | ()
  addp-comm  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) | nothing | [ eq ] | just x | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym  eq) (trans (addp-comm tp tq) eq‚ÇÅ))
  ... | ()
  addp-comm  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] with ( dec (hq +·µ£ hp) ùüò·µ£) | ( dec (hp +·µ£ hq) ùüò·µ£)
  ... | yes hq+hp=0 | yes hp+hq=0 = refl
  ... | yes hq+hp=0 | no hp+hq‚â†0  with ¬¨-elim hp+hq‚â†0 (a+b=b+a=e hq hp hq+hp=0)
  ... | () 
  addp-comm  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] | no x | yes y with ¬¨-elim x (a+b=b+a=e hp hq y)
  ... | ()
  addp-comm  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] | no x | no y = cong just (dcong‚ÇÇ ld ((+-comm) hp hq) refl)




  +‚Çö-comm : (p q : Poly ) ‚Üí p +‚Çö q ‚â° q +‚Çö p 
  +‚Çö-comm ùüò‚Çö ùüò‚Çö = refl
  +‚Çö-comm  ùüò‚Çö (nonùüò‚Çö p) = refl
  +‚Çö-comm  (nonùüò‚Çö p) ùüò‚Çö = refl
  +‚Çö-comm  (nonùüò‚Çö p) (nonùüò‚Çö q) with addp p q | inspect (addp p) q | addp q p | inspect (addp q) p
  ... | just p+q | [ eq‚ÇÅ ] | just q+p | [ eq‚ÇÇ ] = cong nonùüò‚Çö (hlp (x=yjust eq‚ÇÇ eq‚ÇÅ))
    where 
      x=yjust : addp q p ‚â° just q+p ‚Üí addp p q ‚â° just p+q ‚Üí just p+q ‚â° just q+p 
      x=yjust p1 p2 = begin just p+q   
                                      ‚â°‚ü® sym p2 ‚ü©
                            addp p q 
                                      ‚â°‚ü® addp-comm p q ‚ü©
                            addp q p 
                                      ‚â°‚ü® p1 ‚ü©
                            just q+p ‚àé
      hlp : just p+q ‚â° just q+p ‚Üí p+q ‚â° q+p 
      hlp refl = refl
  ... | just p+q | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] with justnoth‚ä• (trans (sym eq‚ÇÇ) (trans (addp-comm q p) eq‚ÇÅ))
  ... | ()
  +‚Çö-comm  (nonùüò‚Çö p) (nonùüò‚Çö q) | nothing | [ eq‚ÇÅ ] | just q+p | [ eq‚ÇÇ ] with justnoth‚ä• (sym (trans (sym eq‚ÇÇ) (trans (addp-comm q p) eq‚ÇÅ)))
  ... | ()
  +‚Çö-comm  (nonùüò‚Çö p) (nonùüò‚Çö q) | nothing | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] = refl



-- ////////////  ADDITION - associativity ////////////
  -- write an apology here
  postulate +‚Çö-asoc : (p q r : Poly ) ‚Üí p +‚Çö (q +‚Çö r) ‚â° (p +‚Çö q) +‚Çö r
  -- associativity turned out too complex to prove because of big number of cases to consider
  -- still we proved a property "(addp q p ‚â° addp r p) ‚Üí q ‚â° r" which covers a lot of these cases 
  -- (in case someone would consider tackling the associativity proof ;) )

  ‚à∑‚Çö-injh :  ‚àÄ {a b : M } ‚Üí ‚àÄ {p q : NonZeroPoly} ‚Üí (a ‚à∑‚Çö p) ‚â° (b ‚à∑‚Çö q) ‚Üí  a ‚â° b 
  ‚à∑‚Çö-injh refl = refl

  ‚à∑‚Çö-injt :  ‚àÄ {a b : M } ‚Üí ‚àÄ {p q : NonZeroPoly} ‚Üí (a ‚à∑‚Çö p) ‚â° (b ‚à∑‚Çö q) ‚Üí  p ‚â° q 
  ‚à∑‚Çö-injt refl = refl

  ld-inj :   ‚àÄ {a b : M } ‚Üí ‚àÄ {a‚â†0 b‚â†0} ‚Üí (ld  a a‚â†0) ‚â° (ld b b‚â†0) ‚Üí a ‚â° b
  ld-inj refl = refl

  ‚à∑‚Çö-‚â° :  {a b : M } ‚Üí ‚àÄ {p q : NonZeroPoly} ‚Üí a ‚â° b ‚Üí p ‚â° q  ‚Üí (a ‚à∑‚Çö p) ‚â° (b ‚à∑‚Çö q)
  ‚à∑‚Çö-‚â°  refl refl = refl 

  ld-‚â° :  ‚àÄ {a b : M } ‚Üí ‚àÄ {a‚â†0 b‚â†0} ‚Üí a ‚â° b ‚Üí (ld  a a‚â†0) ‚â° (ld b b‚â†0)
  ld-‚â° {a}{b}{a‚â†0}{b‚â†0} p with (dec) a (ùüò·µ£)
  ld-‚â°  {ùüò·µ£} {ùüò·µ£} {a‚â†0} {b‚â†0} refl | yes refl = refl
  ld-‚â°  {a} {a} {a‚â†0} {b‚â†0} refl | no x = refl

  ldtl‚ä• :  (p q : NonZeroPoly) ‚Üí addp p q  ‚â°  just p ‚Üí ‚ä•
  ldtl‚ä•  (ld a a‚â†0) (ld b b‚â†0) r with dec  (a +·µ£ b) ùüò·µ£
  ... | no a+b‚â†0 with b‚â†0 (x+a=x‚Üía=0  a b (ld-inj (just-injective r)))
  ... | ()
  ldtl‚ä• (hp ‚à∑‚Çö tp) (ld a a‚â†0) r  with ¬¨-elim a‚â†0 (a+x=x‚Üía=0 hp a (‚à∑‚Çö-injh (just-injective r)) )
  ... | ()
  ldtl‚ä• (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) r with addp tp tq | inspect (addp tp) tq  
  ... | just tp+tq | [ eq ] with   (‚à∑‚Çö-injt (just-injective r))
  ... | res rewrite res with ldtl‚ä• tp tq eq 
  ... | () 
  ldtl‚ä•  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) r | nothing | [ eq ] with dec  (hp +·µ£ hq) ùüò·µ£
  ldtl‚ä•  (hp ‚à∑‚Çö tp) (hq ‚à∑‚Çö tq) () | nothing | [ eq ] | yes hp+hq=0
  ... | no hp+hq‚â†0 with just-injective r 
  ... | () 

  ldtl‚ä•sym :  (p q : NonZeroPoly) ‚Üí addp q p  ‚â°  just p ‚Üí ‚ä•
  ldtl‚ä•sym p q r with ldtl‚ä• p q (trans (addp-comm p q) r)
  ... | ()

  addpinj : (p q r : NonZeroPoly) ‚Üí addp q p ‚â° addp r p  ‚Üí q ‚â° r 
  addpinj  (ld a a‚â†0) (ld b b‚â†0) (ld c c‚Çö) h with (dec (b +·µ£ a)) ùüò·µ£  | (dec (c +·µ£  a)) ùüò·µ£ 
  ... | yes b+a=0 | yes c+a=0 = dcong‚ÇÇ ld (a+x=0=b+x‚Üía=b  a b c b+a=0 c+a=0) refl
  ... | no b+a‚â†0 | no c+a‚â†0 = dcong‚ÇÇ ld (a+x=b+x‚Üía=b a b c (ld-inj hlp)) refl
    where
      hlp :  (ld (b +·µ£ a) b+a‚â†0) ‚â°  (ld (c +·µ£ a) c+a‚â†0)
      hlp = just-injective h
  addpinj  (ld a _) (ld b _) (c ‚à∑‚Çö tc) h with dec  (b +·µ£ a) ùüò·µ£
  addpinj  (ld a _) (ld b _) (c ‚à∑‚Çö tc) () | yes x
  addpinj  (ld a _) (ld b _) (c ‚à∑‚Çö tc) () | no x
  addpinj  (ld a _) (b ‚à∑‚Çö tb) (ld c pc) h with dec  (c +·µ£ a) ùüò·µ£
  addpinj  (ld a _) (b ‚à∑‚Çö tb) (ld c pc) () | yes x‚ÇÅ
  addpinj  (ld a _) (b ‚à∑‚Çö tb) (ld c pc) () | no x‚ÇÅ
  addpinj  (ld a _) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h = ‚à∑‚Çö-‚â° headeq tleq
    where 
      headeq :  b  ‚â° c
      headeq  = x+a=x+b‚Üía=b a b c (‚à∑‚Çö-injh (just-injective h))
      tleq : tb  ‚â° tc 
      tleq  = ‚à∑‚Çö-injt (just-injective h)
  addpinj  (a ‚à∑‚Çö ta) (ld b b‚â†0) (ld c pc) h = ld-‚â° (a+x=b+x‚Üía=b  a b c (‚à∑‚Çö-injh (just-injective h)))
  addpinj  (a ‚à∑‚Çö ta) (ld b b‚â†0) (hc ‚à∑‚Çö tc) h with addp tc ta | inspect (addp tc) ta
  ... | just tc+ta | [ eq ] with (‚à∑‚Çö-injt(just-injective h))
  ... | res rewrite res with ldtl‚ä•sym  tc+ta tc eq
  ... | ()
  addpinj  (a ‚à∑‚Çö ta) (ld b b‚â†0) (hc ‚à∑‚Çö tc) h | nothing | [ eq ] with dec  (hc +·µ£ a) (ùüò·µ£)
  addpinj  (a ‚à∑‚Çö ta) (ld b b‚â†0) (hc ‚à∑‚Çö tc) () | nothing | [ eq ] | yes hc+a=0
  addpinj  (a ‚à∑‚Çö ta) (ld b b‚â†0) (hc ‚à∑‚Çö tc) () | nothing | [ eq ] | no hc+a‚â†0
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) h with addp tb ta | inspect (addp tb) ta
  ... | just tb+ta | [ eq ] with (‚à∑‚Çö-injt(just-injective h))
  ... | res rewrite res with ldtl‚ä•sym  ta tb eq 
  ... | ()
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) h | nothing | [ eq ] with dec  (b +·µ£ a) (ùüò·µ£) 
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) () | nothing | [ eq ] | yes x
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) () | nothing | [ eq ] | no x
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h with addp tb ta | inspect (addp tb) ta | addp tc ta | inspect (addp tc) ta  
  ... | just tb+ta | [ eq‚ÇÅ ] | just tc+ta | [ eq‚ÇÇ ] = ‚à∑‚Çö-‚â° hlp2 hlp
    where 
      hlp2 : b ‚â° c 
      hlp2 = a+x=b+x‚Üía=b a b c (‚à∑‚Çö-injh (just-injective h))
      hlp3 : tb+ta ‚â° tc+ta
      hlp3 = (‚à∑‚Çö-injt (just-injective h))
      hlp4 : tb+ta ‚â° tc+ta ‚Üí just tb+ta ‚â° just tc+ta
      hlp4 refl = refl
      hlp : tb ‚â° tc 
      hlp = addpinj ta tb tc (trans eq‚ÇÅ (trans (hlp4 hlp3)(sym eq‚ÇÇ)) )
  ... | just tb+ta | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] with dec   (c +·µ£ a) ùüò·µ£
  addpinj (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | just tb+ta | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] | yes c+a=0
  addpinj (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | just tb+ta | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] | no c+a‚â†0
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h | nothing | [ eq‚ÇÅ ] | just tc+ta | [ eq‚ÇÇ ] with dec (b +·µ£ a) ùüò·µ£
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | nothing | [ eq‚ÇÅ ] | just tc+ta | [ eq‚ÇÇ ] | yes b+a=0
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | nothing | [ eq‚ÇÅ ] | just tc+ta | [ eq‚ÇÇ ] | no b+a‚â†0
  addpinj  (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h | nothing | [ eq‚ÇÅ ] | nothing | [ eq‚ÇÇ ] with dec  (b +·µ£ a) ùüò·µ£ | dec (c +·µ£ a) ùüò·µ£
  ... | yes b+a=0 | yes c+a=0 = ‚à∑‚Çö-‚â° hlp2 (sym hlp)
    where   
      hlp2 : b ‚â° c 
      hlp2 = a+x=0=b+x‚Üía=b a b c b+a=0 c+a=0
      hlp : tc ‚â° tb 
      hlp = addpinj ta tc tb (trans eq‚ÇÇ  (sym eq‚ÇÅ))
  ... | no b+a‚â†0 | no c+a‚â†0 = ‚à∑‚Çö-‚â° hlp2 (sym hlp)
    where   
      hlp2 : b ‚â° c 
      hlp2 = (a+x=b+x‚Üía=b a b c  (ld-inj (just-injective  h)))
      hlp : tc ‚â° tb 
      hlp = addpinj ta tc tb (trans eq‚ÇÇ  (sym eq‚ÇÅ))


-- ////////////  left inverse for addition ////////////
  -‚Çöh-empt :  (p : NonZeroPoly) ‚Üí addp (-‚Çöh p) p ‚â° nothing
  -‚Çöh-empt  (ld a a‚â†0) with dec  ( (-·µ£ a) +·µ£ a) (ùüò·µ£)
  ... | yes -a+a=0 = refl
  ... | no -a+a‚â†0 with ¬¨-elim -a+a‚â†0 ((-left ) a) 
  ... | () 
  -‚Çöh-empt  (hp ‚à∑‚Çö tp) with -‚Çöh-empt tp  | addp (-‚Çöh tp) tp | inspect (addp (-‚Çöh tp)) tp
  ... | h | nothing | [ i ] with dec ( (-·µ£ hp) +·µ£ hp) (ùüò·µ£)
  ... | yes -hp+hp=0 = refl
  ... | no -hp+hp‚â†0 with ¬¨-elim -hp+hp‚â†0 ((-left ) hp) 
  ... | ()
  -‚Çöh-empt  (hp ‚à∑‚Çö tp) | h | just -htp+tp | [ i ] with justnoth‚ä• (trans (sym h) i)
  ... | ()

  -‚Çö-left  :  (p : Poly) ‚Üí (-‚Çö p) +‚Çö p ‚â° ùüò‚Çö
  -‚Çö-left  ùüò‚Çö = refl
  -‚Çö-left  (nonùüò‚Çö p) with addp (-‚Çöh p) p | inspect (addp (-‚Çöh p)) p
  ... | just -hp+p | [ i ] with justnoth‚ä• (sym(trans (sym i) (-‚Çöh-empt p )) )
  ... | ()
  -‚Çö-left  (nonùüò‚Çö p)  | nothing | [ i ] = refl

-- ////////////  constant polynomial is left unit for addition ////////////
  ùüò‚Çö-left  : (p : Poly) ‚Üí ùüò‚Çö +‚Çö p ‚â° p
  ùüò‚Çö-left p = refl

-- ////////////  DEGREE proofs ////////////

  -- multiplication by constant doesn't change degree
  kmul-deg : (a : M) ‚Üí (p : NonZeroPoly) ‚Üí (a‚â†0 : ¬¨ (a ‚â° ùüò·µ£)) ‚Üí degreehlp (kmul a p a‚â†0) ‚â° degreehlp p
  kmul-deg a (ld b b‚â†0) a‚â†0 = refl
  kmul-deg a (hp ‚à∑‚Çö tp) a‚â†0 = cong suc (kmul-deg a tp a‚â†0)

  ¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú-degree : (a : M) ‚Üí (p : Poly) ‚Üí ¬¨ (a ‚â° ùüò·µ£) ‚Üí  degree (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a p) ‚â° (degree p)
  ¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú-degree a ùüò‚Çö a‚â†0 = refl
  ¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú-degree a (nonùüò‚Çö p) a‚â†0 with dec a ùüò·µ£
  ...                                 | yes a=0 with (a‚â†0 a=0)
  ...                                          | ()
  ¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú-degree a (nonùüò‚Çö p) a‚â†0        | no a‚â†0 = kmul-deg a p a‚â†0

  -- multiplication by x increases degree by 1  (NONZERO POLYNOMIALS)
  x¬∑‚Çö-deg : (p : NonZeroPoly) ‚Üí degree (x¬∑‚Çö (nonùüò‚Çö p)) ‚â° 1 +‚Åø (degree (nonùüò‚Çö p))
  x¬∑‚Çö-deg (ld a a‚â†0) = refl
  x¬∑‚Çö-deg (hp ‚à∑‚Çö tp) = cong suc refl

-- ////////////  MULTIPLICATION - commutativity  ////////////
-- Tip for future agda conquerors: always call all induction steps in the outer most with abstraction otherwise
-- agda will shove its termination checking problems and surprise you with them when you least expect
  merge :  (a : M) ‚Üí (p : NonZeroPoly ) ‚Üí (a‚â†0 : ¬¨ (a ‚â° (ùüò·µ£))) ‚Üí (nonùüò‚Çö (a ‚à∑‚Çö p) ‚â° nonùüò‚Çö (ld a a‚â†0) +‚Çö (x¬∑‚Çö (nonùüò‚Çö p)))
  merge a p a‚â†0 = cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (sym (ùüò-right a)) refl)

  ùüò‚Çö-multi : (p : Poly ) ‚Üí ¬∑‚Çö p ùüò‚Çö ‚â° ùüò‚Çö
  ùüò‚Çö-multi ùüò‚Çö = refl
  ùüò‚Çö-multi (nonùüò‚Çö (ld a a‚â†0)) = refl
  ùüò‚Çö-multi (nonùüò‚Çö (x ‚à∑‚Çö tx)) = sym (begin ùüò‚Çö  ‚â°‚ü® refl ‚ü© x¬∑‚Çö ùüò‚Çö ‚â°‚ü® cong  x¬∑‚Çö (sym (ùüò‚Çö-multi (nonùüò‚Çö tx))) ‚ü© x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö tx) ùüò‚Çö) ‚àé)

  mùüòùüò : (k : M) ‚Üí (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú  k ùüò‚Çö) ‚â° ùüò‚Çö
  mùüòùüò k with dec k (ùüò·µ£)
  ... | yes _ = refl
  ... | no _ = refl

  -- 1‚Çö is a multiplication unit
  kmulres : (p : NonZeroPoly ) ‚Üí kmul ùüô·µ£ p ùüô·µ£‚â†ùüò·µ£ ‚â° p
  kmulres (ld a _) = dcong‚ÇÇ ld (ùüô·µ£-left a) refl
  kmulres (x ‚à∑‚Çö p) = cong‚ÇÇ _‚à∑‚Çö_ (ùüô·µ£-left x) (kmulres p)

  1‚Çö-left  : (p : Poly) ‚Üí (¬∑‚Çö 1‚Çö p) ‚â° p
  1‚Çö-left ùüò‚Çö = mùüòùüò ùüô·µ£
  1‚Çö-left (nonùüò‚Çö x) with (dec ùüô·µ£ ùüò·µ£)
  1‚Çö-left (nonùüò‚Çö (ld a x)) | no _ = cong nonùüò‚Çö (dcong‚ÇÇ ld (ùüô·µ£-left a) refl)
  1‚Çö-left (nonùüò‚Çö (x ‚à∑‚Çö x‚ÇÅ)) | no _ = cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (ùüô·µ£-left x) (kmulres x‚ÇÅ))
  ... | yes 1=0 with ùüô·µ£‚â†ùüò·µ£
  ...             | 1=0‚Üí‚ä• with 1=0‚Üí‚ä• 1=0
  ...                   | ()

  ùüò·µ£!=ùüò·µ£‚Üí‚ä• : ¬¨ ( ùüò·µ£ +·µ£ ùüò·µ£ ‚â° ùüò·µ£) ‚Üí ‚ä•
  ùüò·µ£!=ùüò·µ£‚Üí‚ä• p with œâ-left ùüò·µ£
  ... | res with p res
  ... | ()

  split‚à∑‚Çö : (p q : Poly) ‚Üí (x¬∑‚Çö (p +‚Çö q)) ‚â° ((x¬∑‚Çö p) +‚Çö (x¬∑‚Çö q))
  split‚à∑‚Çö ùüò‚Çö ùüò‚Çö = refl
  split‚à∑‚Çö ùüò‚Çö (nonùüò‚Çö x) = refl
  split‚à∑‚Çö (nonùüò‚Çö x) ùüò‚Çö = refl
  split‚à∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y) with addp x y
  ... | just x+y = cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (sym (œâ-left ùüò·µ£)) refl)
  ... | nothing with dec ( ùüò·µ£ +·µ£ ùüò·µ£) ùüò·µ£
  ... | yes _ = refl
  ... | no ùüò·µ£!=ùüò·µ£ with ùüò·µ£!=ùüò·µ£‚Üí‚ä• ùüò·µ£!=ùüò·µ£
  ... | ()


  rearrange1 : (a b c d : Poly) ‚Üí a +‚Çö c +‚Çö (b +‚Çö d) ‚â° a +‚Çö (b +‚Çö c +‚Çö d)
  rearrange1 a b c d = begin a +‚Çö c +‚Çö (b +‚Çö d) 
                                    ‚â°‚ü® sym (+‚Çö-asoc a c (b +‚Çö d)) ‚ü©
                              a +‚Çö (c +‚Çö (b +‚Çö d)) 
                                    ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {a} {a} {(c +‚Çö (b +‚Çö d))} {(c +‚Çö b +‚Çö d)} refl (+‚Çö-asoc c b d) ‚ü©
                              a +‚Çö ((c +‚Çö b) +‚Çö d) 
                                    ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {a} {a} {(c +‚Çö b +‚Çö d)} {(b +‚Çö c +‚Çö d)} refl (cong‚ÇÇ _+‚Çö_ {(c +‚Çö b) } {(b +‚Çö c) } {d} {d} (+‚Çö-comm c b) refl) ‚ü©
                              a +‚Çö (b +‚Çö c +‚Çö d)
                              ‚àé

  rearrange2 : (a b c d : Poly) ‚Üí a +‚Çö b +‚Çö (c +‚Çö d) ‚â°  a +‚Çö (b +‚Çö c +‚Çö d)
  rearrange2 a b c d = begin a +‚Çö b +‚Çö (c +‚Çö d)
                                    ‚â°‚ü® sym (+‚Çö-asoc a b (c +‚Çö d)) ‚ü©
                              a +‚Çö (b +‚Çö (c +‚Çö d)) 
                                    ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {a} {a} {(b +‚Çö (c +‚Çö d))} {(b +‚Çö c +‚Çö d)} refl (+‚Çö-asoc b c d) ‚ü©
                              a +‚Çö (b +‚Çö c +‚Çö d)
                              ‚àé

  eùüò=eùüò :  ùüò·µ£ ‚â° ùüò·µ£
  eùüò=eùüò  = refl

  b=e:ab=e : (a b : M) ‚Üí  b ‚â° ùüò·µ£ ‚Üí  a ¬∑·µ£ b ‚â° ùüò·µ£
  b=e:ab=e a b p =  begin a ¬∑·µ£ b 
                                ‚â°‚ü® cong‚ÇÇ (_¬∑·µ£_) refl p ‚ü©
                          a ¬∑·µ£ ùüò·µ£ 
                                ‚â°‚ü® ùüò-multi a ‚ü©
                          ùüò·µ£ 
                          ‚àé

  a=e:ab=e : (a b : M) ‚Üí  a ‚â° ùüò·µ£ ‚Üí  a ¬∑·µ£ b  ‚â° ùüò·µ£
  a=e:ab=e a b p = trans (¬∑·µ£-comm a b) (b=e:ab=e b a p)


  --multiplication commutativity for nonzero polynomials
  ¬∑‚Çö-commhlp : (p q : NonZeroPoly) ‚Üí (¬∑‚Çö (nonùüò‚Çö p) (nonùüò‚Çö q)) ‚â° (¬∑‚Çö (nonùüò‚Çö q) (nonùüò‚Çö p))
  ¬∑‚Çö-commhlp (ld a a‚â†0) (ld b _) with  (dec a ùüò·µ£) | dec b ùüò·µ£
  ... | yes _ | yes _ = refl
  ... | yes a=0 | no _ with a‚â†0 a=0
  ...                   | ()
  ¬∑‚Çö-commhlp (ld a _) (ld b b‚â†0) | no _ | yes b=0 with b‚â†0 b=0
  ...                                                | ()
  ¬∑‚Çö-commhlp (ld a _) (ld b _) | no _ | no _ = cong nonùüò‚Çö (dcong‚ÇÇ ld (¬∑·µ£-comm a b) refl)

  ¬∑‚Çö-commhlp (ld a a‚â†0) (hb ‚à∑‚Çö tb) with  (dec a ùüò·µ£) | dec hb ùüò·µ£ | inspect (dec a) ùüò·µ£
  ... | yes a=0 | _ | [ _ ] with (a‚â†0 a=0)
  ...                  | ()
  ¬∑‚Çö-commhlp (ld a a‚â†0) (hb ‚à∑‚Çö tb) | no da‚â†0 | yes hb=0 | [ eq ] rewrite eq = begin nonùüò‚Çö (kmul a (hb ‚à∑‚Çö tb) da‚â†0)  
                                                                                    ‚â°‚ü® cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (cong‚ÇÇ (_¬∑·µ£_) refl hb=0) refl) ‚ü©
                                                                            nonùüò‚Çö ((a ¬∑·µ£ ùüò·µ£) ‚à∑‚Çö (kmul a tb a‚â†0)) 
                                                                                    ‚â°‚ü® cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (ùüò-multi a) refl) ‚ü©
                                                                            x¬∑‚Çö (nonùüò‚Çö (kmul a tb a‚â†0)) 
                                                                                    ‚â°‚ü® cong x¬∑‚Çö help ‚ü© -- auxiliary
                                                                            x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö tb))) 
                                                                                    ‚â°‚ü® refl ‚ü©
                                                                            x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö (ld a a‚â†0)) (nonùüò‚Çö tb)) 
                                                                                    ‚â°‚ü® cong x¬∑‚Çö (¬∑‚Çö-commhlp  (ld a a‚â†0) tb) ‚ü©
                                                                            x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö tb) (nonùüò‚Çö (ld a a‚â†0))) 
                                                                            ‚àé
        where
          help : nonùüò‚Çö (kmul a tb a‚â†0) ‚â° (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö tb))
          help with (dec a ùüò·µ£) | inspect (dec a) ùüò·µ£
          ... | no x | [ eq ] rewrite eq = cong nonùüò‚Çö refl

  ¬∑‚Çö-commhlp (ld a a‚â†0) (hb ‚à∑‚Çö tb) | no x | no x‚ÇÅ | [ eq ] rewrite eq = sym (begin   (nonùüò‚Çö (ld (hb ¬∑·µ£ a) (nzd x‚ÇÅ a‚â†0))) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö tb) (nonùüò‚Çö (ld a a‚â†0)))
                                                                                        ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {(nonùüò‚Çö (ld (hb ¬∑·µ£ a) (nzd x‚ÇÅ a‚â†0)))} {(nonùüò‚Çö (ld (a ¬∑·µ£ hb) (nzd a‚â†0 x‚ÇÅ)))}
                                                                                         {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö tb) (nonùüò‚Çö (ld a a‚â†0)))} {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö (ld a a‚â†0))  (nonùüò‚Çö tb))} 
                                                                                         (cong nonùüò‚Çö (dcong‚ÇÇ ld (¬∑·µ£-comm hb a) refl)) (cong x¬∑‚Çö (sym switch_konst)) ‚ü©
                                                                                    (nonùüò‚Çö (ld (a ¬∑·µ£ hb) (nzd a‚â†0 x‚ÇÅ))) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö (ld a a‚â†0)) (nonùüò‚Çö tb))
                                                                                        ‚â°‚ü® sym split_product ‚ü©
                                                                                    nonùüò‚Çö ((a ¬∑·µ£ hb) ‚à∑‚Çö kmul a tb x)
                                                                                    ‚àé)

          where
            switch_konst :  ¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö tb) ‚â° ¬∑‚Çö (nonùüò‚Çö tb) (nonùüò‚Çö (ld a a‚â†0))
            switch_konst = begin  ¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö tb) 
                                        ‚â°‚ü® refl ‚ü©
                                  ¬∑‚Çö (nonùüò‚Çö (ld a a‚â†0)) (nonùüò‚Çö tb) 
                                        ‚â°‚ü® ¬∑‚Çö-commhlp (ld a a‚â†0)  tb ‚ü©
                                  ¬∑‚Çö (nonùüò‚Çö tb) (nonùüò‚Çö (ld a a‚â†0)) 
                                  ‚àé

            split_product : nonùüò‚Çö ((a ¬∑·µ£ hb) ‚à∑‚Çö kmul a tb x) ‚â° (nonùüò‚Çö (ld (a ¬∑·µ£ hb) (nzd a‚â†0 x‚ÇÅ)) +‚Çö x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö tb)))
            split_product with dec a ùüò·µ£ | inspect (dec a) ùüò·µ£
            ... | no x | [ eq ] rewrite eq = cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (sym ((ùüò-right (a ¬∑·µ£ hb)))) refl)

  
  ¬∑‚Çö-commhlp (a ‚à∑‚Çö ta) (ld b b‚â†0) with dec b ùüò·µ£ | dec a ùüò·µ£ | (¬∑‚Çö-commhlp ta (ld b b‚â†0))
  ... | no b!=e | yes a=e | commtab = begin x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö ta) (nonùüò‚Çö (ld b b‚â†0))) 
                                                  ‚â°‚ü® cong x¬∑‚Çö commtab ‚ü©
                                            x¬∑‚Çö (nonùüò‚Çö (kmul b ta b!=e)) 
                                                  ‚â°‚ü® refl ‚ü©
                                            nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b ta b!=e) 
                                                  ‚â°‚ü® cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (sym (ùüò-multi b)) refl) ‚ü©
                                            nonùüò‚Çö ((b ¬∑·µ£ ùüò·µ£) ‚à∑‚Çö kmul b ta b!=e) 
                                                  ‚â°‚ü® cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (cong‚ÇÇ (_¬∑·µ£_) refl (sym a=e)) refl ) ‚ü©
                                            nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b ta b!=e) 
                                            ‚àé
  ... | no b!=e | no a!=e | commtab =  begin  nonùüò‚Çö (ld (a ¬∑·µ£ b) (nzd a!=e b‚â†0)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö ta) (nonùüò‚Çö (ld b b‚â†0)))
                                                    ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (ld (a ¬∑·µ£ b) (nzd a!=e b‚â†0))} {nonùüò‚Çö (ld (b ¬∑·µ£ a) (nzd b‚â†0 a!=e))}
                                                     {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö ta) (nonùüò‚Çö (ld b b‚â†0)))} {x¬∑‚Çö (nonùüò‚Çö (kmul b ta b!=e))}
                                                     (cong nonùüò‚Çö (dcong‚ÇÇ ld (¬∑·µ£-comm a b) refl)) (cong x¬∑‚Çö commtab) ‚ü©
                                              nonùüò‚Çö (ld (b ¬∑·µ£ a) (nzd b‚â†0 a!=e)) +‚Çö x¬∑‚Çö (nonùüò‚Çö (kmul b ta b!=e))  
                                                    ‚â°‚ü® sym split_product ‚ü©
                                              nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b ta b!=e) 
                                              ‚àé
                                         where
                                          split_product : nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b ta b‚â†0) ‚â° nonùüò‚Çö (ld (b ¬∑·µ£ a) (nzd b‚â†0 a!=e)) +‚Çö x¬∑‚Çö (nonùüò‚Çö (kmul b ta b!=e) )
                                          split_product with inspect (dec b) ùüò·µ£
                                          ... | [ eq ] rewrite eq =  cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (sym (ùüò-right (b ¬∑·µ£ a))) refl)
  ... | yes x | r2 | commtab with b‚â†0 x
  ... | ()
  ¬∑‚Çö-commhlp (a ‚à∑‚Çö x) (b ‚à∑‚Çö y) with dec a ùüò·µ£ | dec b ùüò·µ£ | inspect (dec b) ùüò·µ£ | ¬∑‚Çö-commhlp x y | ¬∑‚Çö-commhlp x (b ‚à∑‚Çö y) | ¬∑‚Çö-commhlp (a ‚à∑‚Çö x) y | ¬∑‚Çö-commhlp x y 
  ... | yes x‚ÇÅ | yes x‚ÇÇ | [ eqbe ] | commxy | commxby | commyax | commxey = cong x¬∑‚Çö (begin ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) 
                                                                                                  ‚â°‚ü® cong‚ÇÇ ¬∑‚Çö {(nonùüò‚Çö x)} {(nonùüò‚Çö x)} {(nonùüò‚Çö (b ‚à∑‚Çö y))} {(nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö y))} refl (cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ x‚ÇÇ refl)) ‚ü©
                                                                                            ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö y)) 
                                                                                                  ‚â°‚ü® trans (sym subst_zero) split_product ‚ü©
                                                                                            ¬∑‚Çö (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö x)) (nonùüò‚Çö y) 
                                                                                                  ‚â°‚ü® factorize ‚ü©
                                                                                            ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö ((ùüò·µ£) ‚à∑‚Çö x))  
                                                                                                  ‚â°‚ü® sym (cong‚ÇÇ ¬∑‚Çö {(nonùüò‚Çö y)} {(nonùüò‚Çö y)} {(nonùüò‚Çö (a ‚à∑‚Çö x))} {(nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö x))} refl (cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ x‚ÇÅ refl))) ‚ü©
                                                                                            ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)) 
                                                                                            ‚àé)

              where
                subst_zero : ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) ‚â° ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö y))
                subst_zero =  cong‚ÇÇ ¬∑‚Çö {(nonùüò‚Çö x)} {(nonùüò‚Çö x)} {(nonùüò‚Çö (b ‚à∑‚Çö y))} {(nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö y))} refl (cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ x‚ÇÇ refl))

                split_product : ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) ‚â° (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú ùüò·µ£ (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))
                split_product  with  dec ùüò·µ£ ùüò·µ£ | inspect (dec ùüò·µ£) ùüò·µ£
                ... | yes eùüò=eùüò | [ eq ] rewrite eq = begin ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) 
                                                                  ‚â°‚ü® commxby ‚ü©
                                                             x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)) 
                                                                  ‚â°‚ü® cong x¬∑‚Çö (sym commxy) ‚ü©
                                                             x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))  
                                                             ‚àé

                ... | no e!=e | [ eq ] with ¬¨-elim e!=e eùüò=eùüò
                ... | ()


                factorize : (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú ùüò·µ£ (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)) ‚â° ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö x))
                factorize with dec ùüò·µ£ ùüò·µ£ | inspect (dec ùüò·µ£) ùüò·µ£
                ... | yes p | [ eq ]  = begin x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)) 
                                                    ‚â°‚ü® refl ‚ü©
                                              ùüò‚Çö +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)) 
                                                    ‚â°‚ü® split ‚ü©
                                              (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú ùüò·µ£ (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)) 
                                                    ‚â°‚ü®‚ü©
                                              ¬∑‚Çö (nonùüò‚Çö ((ùüò·µ£) ‚à∑‚Çö x)) (nonùüò‚Çö y) 
                                                    ‚â°‚ü® ¬∑‚Çö-commhlp  (ùüò·µ£ ‚à∑‚Çö x)  y ‚ü©
                                              ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö x)) 
                                              ‚àé
                          where
                            split : x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)) ‚â° ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú ùüò·µ£ (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))
                            split with dec ùüò·µ£ ùüò·µ£
                            ... | yes x = cong x¬∑‚Çö refl

                ... | no p | [ eq ] with ¬¨-elim p eùüò=eùüò
                ... | ()
                
  ... | yes a=e | no b!=e  | [ eqbe ] | commxy | commxby | commyax  | commxey =  begin  x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y))) 
                                                                                              ‚â°‚ü® cong x¬∑‚Çö commxby ‚ü©
                                                                                        x¬∑‚Çö (nonùüò‚Çö (kmul b x b!=e) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))) 
                                                                                              ‚â°‚ü® cong x¬∑‚Çö (cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (kmul b x b!=e)} {nonùüò‚Çö (kmul b x b!=e)}
                                                                                                {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))} {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))}
                                                                                                refl (cong x¬∑‚Çö (sym commxy))) ‚ü©
                                                                                        x¬∑‚Çö (nonùüò‚Çö (kmul b x b!=e) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))  
                                                                                              ‚â°‚ü® split‚à∑‚Çö (nonùüò‚Çö (kmul b x b!=e)) (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))) ‚ü©
                                                                                        nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x b!=e) +‚Çö x¬∑‚Çö( x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))
                                                                                              ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x b!=e)} {nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b x b!=e)}
                                                                                                {x¬∑‚Çö( x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))} {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)))}
                                                                                                (cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ (sym (b=e:ab=e b a a=e)) refl)) (cong x¬∑‚Çö commyax) ‚ü©
        -- ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö x)) ‚â°
        -- ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x))
                                                                                        nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b x b!=e) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x))) 
                                                                                        ‚àé

  ... | no a!=e | yes b=e  | [ eqbe ] | commxy | commxby | commyax | commxey = begin nonùüò‚Çö ((a ¬∑·µ£ b) ‚à∑‚Çö kmul a y a!=e) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)))
                                                                                          ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö ((a ¬∑·µ£ b) ‚à∑‚Çö kmul a y a!=e)} {nonùüò‚Çö ( (ùüò·µ£) ‚à∑‚Çö kmul a y a!=e)}
                                                                                          {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)))} {x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)))}
                                                                                          (cong nonùüò‚Çö (cong‚ÇÇ _‚à∑‚Çö_ ( b=e:ab=e a b b=e ) refl)) (cong x¬∑‚Çö commxby) ‚ü©
                                                                                      nonùüò‚Çö ((ùüò·µ£) ‚à∑‚Çö kmul a y a!=e) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))) 
                                                                                          ‚â°‚ü® refl ‚ü©
                                                                                      x¬∑‚Çö (nonùüò‚Çö (kmul a y a!=e)) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))) 
                                                                                          ‚â°‚ü® sym (split‚à∑‚Çö ((nonùüò‚Çö (kmul a y a!=e))) ((x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))))) ‚ü©
                                                                                      x¬∑‚Çö ((nonùüò‚Çö (kmul a y a!=e)) +‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))))
                                                                                          ‚â°‚ü® cong x¬∑‚Çö (cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (kmul a y a!=e)} {nonùüò‚Çö (kmul a y a!=e)} 
                                                                                            {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))}{x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))} refl (cong x¬∑‚Çö (sym commxy))) ‚ü©
                                                                                      x¬∑‚Çö ((nonùüò‚Çö (kmul a y a!=e)) +‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))) 
                                                                                          ‚â°‚ü® cong x¬∑‚Çö commyax ‚ü©
                                                                                      x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)))
                                                                                      ‚àé

  ... | no x‚ÇÅ | no x‚ÇÇ  | [ eqbe ] | commxy | commxby | commyax | commxey =  begin nonùüò‚Çö ((a ¬∑·µ£ b) ‚à∑‚Çö kmul a y x‚ÇÅ) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)))
                                                                                        ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö ((a ¬∑·µ£ b) ‚à∑‚Çö kmul a y x‚ÇÅ)} {nonùüò‚Çö ((a ¬∑·µ£ b) ‚à∑‚Çö kmul a y x‚ÇÅ)} 
                                                                                          {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)))} {x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))}
                                                                                          refl ((cong x¬∑‚Çö (reduction1))) ‚ü©
                                                                                  nonùüò‚Çö ((a ¬∑·µ£ b) ‚à∑‚Çö kmul a y x‚ÇÅ) +‚Çö x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))) 
                                                                                        ‚â°‚ü® split x y a b x‚ÇÅ x‚ÇÇ ‚ü©
                                                                                  ((nonùüò‚Çö (ld ((a ¬∑·µ£ b)) (nzd x‚ÇÅ x‚ÇÇ))) +‚Çö (nonùüò‚Çö  (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ))) +‚Çö ((x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))) 
                                                                                        ‚â°‚ü® rearrange2 (nonùüò‚Çö (ld ((a ¬∑·µ£ b)) (nzd x‚ÇÅ x‚ÇÇ))) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ))
                                                                                          (x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))) (x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))) ‚ü©
                                                                                  ((nonùüò‚Çö (ld ((a ¬∑·µ£ b)) (nzd x‚ÇÅ x‚ÇÇ))) +‚Çö (((nonùüò‚Çö  ((ùüò·µ£) ‚à∑‚Çö kmul a y x‚ÇÅ)) +‚Çö (x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x)))) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))))) 
                                                                                        ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (ld ((a ¬∑·µ£ b)) (nzd x‚ÇÅ x‚ÇÇ))} {nonùüò‚Çö (ld ((b ¬∑·µ£ a)) (nzd x‚ÇÇ x‚ÇÅ))} 
                                                                                          {((nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ) +‚Çö x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))))} 
                                                                                          {((x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ)) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))))} 
                                                                                          (cong nonùüò‚Çö (dcong‚ÇÇ ld (¬∑·µ£-comm a b) refl)) final_comp ‚ü©
                                                                                  (nonùüò‚Çö (ld ((b ¬∑·µ£ a)) (nzd x‚ÇÇ x‚ÇÅ))) +‚Çö (((x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y))) +‚Çö (nonùüò‚Çö  ((ùüò·µ£) ‚à∑‚Çö kmul b x x‚ÇÇ))) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)))) 
                                                                                        ‚â°‚ü® sym (rearrange1 (nonùüò‚Çö (ld ((b ¬∑·µ£ a)) (nzd x‚ÇÇ x‚ÇÅ))) (x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y))) (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ)) (x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))))) ‚ü©
                                                                                  ((nonùüò‚Çö (ld ((b ¬∑·µ£ a)) (nzd x‚ÇÇ x‚ÇÅ))) +‚Çö (nonùüò‚Çö  (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ))) +‚Çö ((x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y))) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)))) 
                                                                                        ‚â°‚ü® sym (split y x b a x‚ÇÇ x‚ÇÅ) ‚ü©
                                                                                  nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b x x‚ÇÇ) +‚Çö x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))) 
                                                                                        ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b x x‚ÇÇ)} {nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b x x‚ÇÇ)} {x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)))} 
                                                                                          {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)))} refl (cong x¬∑‚Çö (sym (reduction2))) ‚ü©
                                                                                  nonùüò‚Çö ((b ¬∑·µ£ a) ‚à∑‚Çö kmul b x x‚ÇÇ) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x))) 
                                                                                  ‚àé
              where
                kmul_konst : (u : NonZeroPoly) ‚Üí (i : M) ‚Üí (pi : ¬¨ (i ‚â° ùüò·µ£)) ‚Üí nonùüò‚Çö (kmul i u pi) ‚â° (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú i (nonùüò‚Çö u))
                kmul_konst u i pi with dec i ùüò·µ£ | inspect (dec i) ùüò·µ£
                ... | no x | [ eq ]  = cong nonùüò‚Çö refl
                ... | yes x | [ eq ] with pi x
                ... | ()



                reduction1 :  ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) ‚â° (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))
                reduction1 with dec b ùüò·µ£ | inspect (dec b) ùüò·µ£
                ... | no b‚â†0 | [ eq ] = begin  ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) 
                                                    ‚â°‚ü® hlp ‚ü©
                                              ¬∑‚Çö (nonùüò‚Çö (b ‚à∑‚Çö y)) (nonùüò‚Çö x) 
                                                    ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {(¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))} {nonùüò‚Çö (kmul b x b‚â†0)} {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))} 
                                                      {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))} (sym (kmul_konst x b b‚â†0)) (cong x¬∑‚Çö (sym commxy )) ‚ü©
                                              nonùüò‚Çö (kmul b x b‚â†0) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))
                                              ‚àé
                                    where
                                      hlp : ¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö (b ‚à∑‚Çö y)) ‚â° (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))
                                      hlp rewrite eq = commxby
                ... | yes b‚â†0 | [ eq ]  with x‚ÇÇ b‚â†0
                ... | ()

                reduction2 : ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)) ‚â° (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))
                reduction2 with dec a ùüò·µ£ | inspect (dec a) ùüò·µ£
                ... | no a‚â†0 | [ eq ] = begin  ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)) 
                                                    ‚â°‚ü® hlp ‚ü©
                                              ¬∑‚Çö (nonùüò‚Çö (a ‚à∑‚Çö x)) (nonùüò‚Çö y) 
                                                    ‚â°‚ü® cong‚ÇÇ _+‚Çö_ {(¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y))} {nonùüò‚Çö (kmul a y a‚â†0)} {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))}
                                                     {x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))} (sym (kmul_konst y a a‚â†0)) (cong x¬∑‚Çö ( commxy )) ‚ü©
                                              nonùüò‚Çö (kmul a y a‚â†0) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x))
                                              ‚àé
                                    where
                                      hlp : ¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö (a ‚à∑‚Çö x)) ‚â° ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))
                                      hlp rewrite eq = sym commyax
                ... | yes a‚â†0 | [ eq ]  with x‚ÇÅ a‚â†0
                ... | ()

                split : (u : NonZeroPoly ) ‚Üí (v : NonZeroPoly ) ‚Üí (i : M) ‚Üí (j : M) ‚Üí (pi : ¬¨ (i ‚â° (ùüò·µ£))) ‚Üí (pj : ¬¨ (j ‚â° (ùüò·µ£))) ‚Üí 
                        (nonùüò‚Çö ((i ¬∑·µ£ j) ‚à∑‚Çö kmul i v pi) +‚Çö x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú j (nonùüò‚Çö u)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö u) (nonùüò‚Çö v)))) ‚â° (nonùüò‚Çö (((i ¬∑·µ£ j) +·µ£ ùüò·µ£) ‚à∑‚Çö kmul i v pi) +‚Çö (x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú j (nonùüò‚Çö u)) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö u) (nonùüò‚Çö v)))))
                split u v i j pi pj = cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö ((i ¬∑·µ£ j) ‚à∑‚Çö kmul i v pi)} {nonùüò‚Çö (((i ¬∑·µ£ j) +·µ£ ùüò·µ£) ‚à∑‚Çö kmul i v pi)} {x¬∑‚Çö ((¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú j (nonùüò‚Çö u)) +‚Çö x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö u) (nonùüò‚Çö v)))} {x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú j (nonùüò‚Çö u)) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö u) (nonùüò‚Çö v)))}
                                      (merge ((i ¬∑·µ£ j)) (kmul i v pi) (nzd pi pj)) (split‚à∑‚Çö  (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú j (nonùüò‚Çö u)) (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö u) (nonùüò‚Çö v))))


                xmul_ùüò·µ£ : (u : NonZeroPoly ) ‚Üí nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö u) ‚â° x¬∑‚Çö (nonùüò‚Çö u)
                xmul_ùüò·µ£ u = refl

                midelement_switch1 : nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ) ‚â° x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y))
                midelement_switch1 with dec a ùüò·µ£
                ... | no a‚â†0 = refl
                ... | yes a‚â†0 with x‚ÇÅ a‚â†0
                ... | ()

                midelement_switch2 : x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x)) ‚â° nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ)
                midelement_switch2 with dec b ùüò·µ£
                ... | no b‚â†0 = refl
                ... | yes b‚â†0 with x‚ÇÇ b‚â†0
                ... | ()

                final_comp : (nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ) +‚Çö x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y))) ‚â° (x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ)) +‚Çö x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)))
                final_comp = cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ) +‚Çö x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))} {x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y)) +‚Çö nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ)} {x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö x) (nonùüò‚Çö y)))} {x¬∑‚Çö (x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö y) (nonùüò‚Çö x)))}
                              (cong‚ÇÇ _+‚Çö_ {nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul a y x‚ÇÅ)} {x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú a (nonùüò‚Çö y))} {x¬∑‚Çö (¬∑‚Çñ‚Çí‚Çô‚Çõ‚Çú b (nonùüò‚Çö x))} {nonùüò‚Çö (ùüò·µ£ ‚à∑‚Çö kmul b x x‚ÇÇ)} midelement_switch1 midelement_switch2) (cong x¬∑‚Çö (cong x¬∑‚Çö (¬∑‚Çö-commhlp x y)))



  ¬∑‚Çö-comm : (p q : Poly)‚Üí (¬∑‚Çö p q) ‚â° (¬∑‚Çö q p)
  ¬∑‚Çö-comm ùüò‚Çö ùüò‚Çö = refl
  ¬∑‚Çö-comm ùüò‚Çö (nonùüò‚Çö (ld _ _)) = refl
  ¬∑‚Çö-comm ùüò‚Çö (nonùüò‚Çö (x ‚à∑‚Çö tx)) = begin ¬∑‚Çö ùüò‚Çö (nonùüò‚Çö (x ‚à∑‚Çö tx)) 
                                            ‚â°‚ü®‚ü© 
                                      ùüò‚Çö 
                                            ‚â°‚ü®‚ü© 
                                      x¬∑‚Çö ùüò‚Çö 
                                            ‚â°‚ü® cong x¬∑‚Çö (sym (ùüò‚Çö-multi (nonùüò‚Çö tx)) ) ‚ü©
                                      x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö tx) ùüò‚Çö) 
                                      ‚àé
  ¬∑‚Çö-comm (nonùüò‚Çö (ld _ _)) ùüò‚Çö = refl
  ¬∑‚Çö-comm (nonùüò‚Çö (_ ‚à∑‚Çö tx)) ùüò‚Çö = sym (begin  ùüò‚Çö 
                                                  ‚â°‚ü® refl ‚ü© 
                                            x¬∑‚Çö ùüò‚Çö 
                                                  ‚â°‚ü® cong x¬∑‚Çö (sym (ùüò‚Çö-multi (nonùüò‚Çö tx)))‚ü©
                                            x¬∑‚Çö (¬∑‚Çö (nonùüò‚Çö tx) ùüò‚Çö) 
                                            ‚àé)
  ¬∑‚Çö-comm (nonùüò‚Çö p) (nonùüò‚Çö q) = ¬∑‚Çö-commhlp p q   