open import Ring
import RingProperties
import Polynomials

open import Data.Empty   using (‚ä•; ‚ä•-elim)
open import Data.Maybe   using (Maybe; nothing; just)
open import Data.Maybe.Properties using (just-injective)
open import Data.Nat     using (‚Ñï; zero; suc; _‚â§_; z‚â§n; s‚â§s; _<_) renaming (_+_ to _+‚Åø_; _*_ to _*‚Åø_)

import Relation.Binary.PropositionalEquality as Eq
open Eq                  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst; [_]; inspect)
open Eq.‚â°-Reasoning      using (begin_; _‚â°‚ü®‚ü©_; step-‚â°; _‚àé)

module PolynomialsProperties (A : Ring) where

  open Ring.Ring A renaming (ùüò to ùüò·µ£; ùüô to ùüô·µ£; _+_ to _+·µ£_; _¬∑_ to _¬∑·µ£_; -_ to -·µ£_ ;ùüô‚â†ùüò to ùüô·µ£‚â†ùüò·µ£; ùüô-left to ùüô·µ£-left; ¬∑-comm to ¬∑·µ£-comm)
  open RingProperties {A}

  open Polynomials A

  dcong : ‚àÄ {A : Set} {B : A ‚Üí Set} (f : (x : A) ‚Üí B x) {x y}
        ‚Üí (p : x ‚â° y) ‚Üí subst B p (f x) ‚â° f y
  dcong f refl = refl

  dcong‚ÇÇ : ‚àÄ {A : Set} {B : A ‚Üí Set} {C : Set}
          (f : (x : A) ‚Üí B x ‚Üí C) {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ}
        ‚Üí (p : x‚ÇÅ ‚â° x‚ÇÇ) ‚Üí subst B p y‚ÇÅ ‚â° y‚ÇÇ
        ‚Üí f x‚ÇÅ y‚ÇÅ ‚â° f x‚ÇÇ y‚ÇÇ
  dcong‚ÇÇ f refl refl = refl
  justnoth‚ä• : {X : Set}{x : X} ‚Üí  nothing ‚â° just x ‚Üí ‚ä•
  justnoth‚ä• ()
  ¬¨-elim : ‚àÄ {A : Set}
    ‚Üí ¬¨ A
    ‚Üí A
      ---
    ‚Üí ‚ä•
  ¬¨-elim ¬¨x x = ¬¨x x


-- ////////////  ADDITION - commutativity ////////////
  addp-comm :  (p q : NonZeroPoly ) ‚Üí addp p q ‚â° addp q p 
  addp-comm (ld a x) (ld b y) with ( dec  (a +·µ£ b) ùüò·µ£) | inspect ( dec (a +·µ£ b) ) ùüò·µ£
  ... | no p | [ eq ] with dec  (b +·µ£ a) ùüò·µ£
  ... | no p2 =  cong just (dcong‚ÇÇ ld (((+-comm ) a b)) refl) 
  ... | yes p2 with p (a+b=b+a=e b a p2 )
  ... | ()
  addp-comm (ld a x) (ld b y) | yes p | [ eq ] with ( dec  (b +·µ£ a) ùüò·µ£) | inspect ( dec (b +·µ£ a) ) ùüò·µ£
  ... | yes x‚ÇÅ | [ eq‚ÇÅ ] = refl
  ... | no p2 | [ eq‚ÇÅ ] with ¬¨-elim p2 (a+b=b+a=e a b p)
  ... | ()
  addp-comm  (ld a x) (x‚ÇÅ ‚à∑‚Çö q) = cong just refl
  addp-comm  (x ‚à∑‚Çö p) (ld a x‚ÇÅ) = cong just refl
  addp-comm  (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) with addp p q | inspect (addp p) q | addp q p | inspect (addp q) p
  ... | just x | [ eq ] | just y | [ eq2 ] = cong just (cong‚ÇÇ _‚à∑‚Çö_ ((+-comm ) a b) (hlp (x=yjust  eq2 eq)))
    where 
      x=yjust : addp q p ‚â° just y ‚Üí addp p q ‚â° just x ‚Üí just x ‚â° just y 
      x=yjust p1 p2 = begin just x  
                                      ‚â°‚ü® sym p2 ‚ü©
                            addp p q 
                                      ‚â°‚ü® addp-comm p q ‚ü©
                            addp q p 
                                      ‚â°‚ü® p1 ‚ü©
                            just y ‚àé
      hlp : just x ‚â° just y ‚Üí x ‚â° y 
      hlp refl = refl

  ... | just x‚ÇÇ | [ eq ] | nothing | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym eq‚ÇÅ) (trans  (addp-comm q p) eq))
  ... | ()
  addp-comm  (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | just x | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym  eq) (trans (addp-comm p q) eq‚ÇÅ))
  ... | ()
  addp-comm  (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] with ( dec (b +·µ£ a) ùüò·µ£) | ( dec (a +·µ£ b) ùüò·µ£)
  ... | yes x | yes x‚ÇÅ = refl
  ... | yes x | no y  with ¬¨-elim y (a+b=b+a=e b a x)
  ... | () 
  addp-comm  (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] | no x | yes y with ¬¨-elim x (a+b=b+a=e   a b  y)
  ... | ()
  addp-comm  (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] | no x | no y = cong just (dcong‚ÇÇ ld ((+-comm) a b) refl)




  +‚Çö-comm : (p q : Poly ) ‚Üí p +‚Çö q ‚â° q +‚Çö p 
  +‚Çö-comm ùüò‚Çö ùüò‚Çö = refl
  +‚Çö-comm  ùüò‚Çö (nonùüò‚Çö x) = refl
  +‚Çö-comm  (nonùüò‚Çö x) ùüò‚Çö = refl
  +‚Çö-comm  (nonùüò‚Çö p) (nonùüò‚Çö q) with addp p q | inspect (addp p) q | addp q p | inspect (addp q) p
  ... | just x | [ eq ] | just y | [ eq‚ÇÅ ] = cong nonùüò‚Çö (hlp (x=yjust eq‚ÇÅ eq))
    where 
      x=yjust : addp q p ‚â° just y ‚Üí addp p q ‚â° just x ‚Üí just x ‚â° just y 
      x=yjust p1 p2 = begin just x   
                                      ‚â°‚ü® sym p2 ‚ü©
                            addp p q 
                                      ‚â°‚ü® addp-comm p q ‚ü©
                            addp q p 
                                      ‚â°‚ü® p1 ‚ü©
                            just y ‚àé
      hlp : just x ‚â° just y ‚Üí x ‚â° y 
      hlp refl = refl
  ... | just x | [ eq ] | nothing | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym eq‚ÇÅ) (trans (addp-comm q p) eq))
  ... | ()
  +‚Çö-comm  (nonùüò‚Çö p) (nonùüò‚Çö q) | nothing | [ eq ] | just y | [ eq‚ÇÅ ] with justnoth‚ä• (sym (trans (sym eq‚ÇÅ) (trans (addp-comm q p) eq)))
  ... | ()
  +‚Çö-comm  (nonùüò‚Çö p) (nonùüò‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] = refl




  -- write an apology here
  postulate +‚Çö-asoc : (p q r : Poly ) ‚Üí p +‚Çö (q +‚Çö r) ‚â° (p +‚Çö q) +‚Çö r