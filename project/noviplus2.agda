module noviplus2 where
open import Level        renaming (zero to lzero; suc to lsuc)

open import Data.Empty   using (‚ä•; ‚ä•-elim)
open import Data.List    using (List; []; _‚à∑_; length)
open import Data.Maybe   using (Maybe; nothing; just)
open import Data.Nat     using (‚Ñï; zero; suc; _‚â§_; z‚â§n; s‚â§s; _<_) renaming (_+_ to _+‚Åø_; _*_ to _*‚Åø_)
open import Data.Product using (Œ£; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax; _√ó_; curry; uncurry)
open import Data.Sum     using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Unit    using (‚ä§; tt)
open import Data.Vec     using (Vec; []; _‚à∑_)
open import Data.Bool    using (Bool; true; false)

open import Function     using (id; _‚àò_)

import Relation.Binary.PropositionalEquality as Eq
open Eq                  using (_‚â¢_;_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst; [_]; inspect)
open Eq.‚â°-Reasoning      using (begin_; _‚â°‚ü®‚ü©_; step-‚â°; _‚àé)

open import Axiom.Extensionality.Propositional using (Extensionality)
postulate fun-ext : ‚àÄ {a b} ‚Üí Extensionality a b


¬¨_ : Set ‚Üí Set
¬¨ A = A ‚Üí ‚ä•

¬¨-elim : ‚àÄ {A : Set}
  ‚Üí ¬¨ A
  ‚Üí A
    ---
  ‚Üí ‚ä•
¬¨-elim ¬¨x x = ¬¨x x

neki : ¬¨ (2 ‚â° 4)
neki ()

dcong : ‚àÄ {A : Set} {B : A ‚Üí Set} (f : (x : A) ‚Üí B x) {x y}
      ‚Üí (p : x ‚â° y) ‚Üí subst B p (f x) ‚â° f y
dcong f refl = refl

dcong‚ÇÇ : ‚àÄ {A : Set} {B : A ‚Üí Set} {C : Set}
         (f : (x : A) ‚Üí B x ‚Üí C) {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ}
       ‚Üí (p : x‚ÇÅ ‚â° x‚ÇÇ) ‚Üí subst B p y‚ÇÅ ‚â° y‚ÇÇ
       ‚Üí f x‚ÇÅ y‚ÇÅ ‚â° f x‚ÇÇ y‚ÇÇ
dcong‚ÇÇ f refl refl = refl



data Dec A : Set where
  yes : A ‚Üí Dec A
  no : (¬¨ A) ‚Üí Dec A



record Ring : Set‚ÇÅ  where
  constructor RingCons
  infix 9 -_
  infixl 7 _¬∑_
  infixl 5 _+_
  field
    M : Set

    -- identity element for multiplication (unicode with `\epsilon`)
    ùüô : M
    -- binary operation multiplication (unicode with `\cdot`)
    _¬∑_     : M ‚Üí M ‚Üí M

    -- identity element for addition (unicode with `\epsilon`)
    ùüò : M
    -- binary operation addition
    _+_     : M ‚Üí M ‚Üí M

    -_ : M ‚Üí M

    -left  : (m : M) ‚Üí (- m) + m ‚â° ùüò
    -- nonzeroring
    ùüô‚â†ùüò :  ¬¨ (ùüô ‚â° ùüò)
    -- ring laws
    ùüô-left  : (m : M) ‚Üí ùüô ¬∑ m ‚â° m
    ¬∑-assoc : (m‚ÇÅ m‚ÇÇ m‚ÇÉ : M) ‚Üí (m‚ÇÅ ¬∑ m‚ÇÇ) ¬∑ m‚ÇÉ ‚â° m‚ÇÅ ¬∑ (m‚ÇÇ ¬∑ m‚ÇÉ)
    ¬∑-comm : (m‚ÇÅ m‚ÇÇ : M) ‚Üí m‚ÇÅ ¬∑ m‚ÇÇ ‚â°  m‚ÇÇ ¬∑ m‚ÇÅ

    œâ-left  : (m : M) ‚Üí ùüò + m ‚â° m
    +-assoc : (m‚ÇÅ m‚ÇÇ m‚ÇÉ : M) ‚Üí (m‚ÇÅ + m‚ÇÇ) + m‚ÇÉ ‚â° m‚ÇÅ + (m‚ÇÇ + m‚ÇÉ)
    +-comm : (m‚ÇÅ m‚ÇÇ : M) ‚Üí m‚ÇÅ + m‚ÇÇ ‚â°  m‚ÇÇ + m‚ÇÅ

    dist-l : (m‚ÇÅ m‚ÇÇ m‚ÇÉ : M) ‚Üí m‚ÇÉ ¬∑ (m‚ÇÅ + m‚ÇÇ) ‚â° (m‚ÇÉ ¬∑ m‚ÇÅ) + (m‚ÇÉ ¬∑ m‚ÇÇ)

    dec : (x y : M) ‚Üí Dec(x ‚â° y)
    -- no zero divisors
    nzd : {x y : M}  ‚Üí ¬¨ (x ‚â° ùüò) ‚Üí ¬¨ (y ‚â° ùüò) ‚Üí ¬¨ ((x ¬∑ y) ‚â° ùüò)

module RingProofs {A : Ring} where

  open Ring A

  
  x+a=0=x+b‚Üía=b :  (x a b : M ) ‚Üí  x + a ‚â° ùüò ‚Üí  x + b ‚â° ùüò ‚Üí a ‚â° b 
  x+a=0=x+b‚Üía=b  x a b h k = hlp2 hlp1
    where 
      hlp1 :  x + a ‚â°  x + b
      hlp1 = trans h (sym k)
      hlp3 : (x : M ) ‚Üí  a ‚â° b ‚Üí  x + a ‚â° x + b 
      hlp3 x p = cong‚ÇÇ _+_ refl p
      hlp4 : (x a : M ) ‚Üí  (- x) + (x + a) ‚â°  a
      hlp4 x a =  begin   (- x) + (x + a)  
                                          ‚â°‚ü® sym((+-assoc ) (- x) x a) ‚ü©
                          ((- x) + x) + a 
                                          ‚â°‚ü® cong‚ÇÇ (_+_) (-left x) refl ‚ü© 
                          ùüò + a 
                                          ‚â°‚ü® œâ-left  a ‚ü©
                          a ‚àé
      hlp2 : x + a ‚â° x + b ‚Üí a ‚â° b 
      hlp2 p =  begin a  
                                ‚â°‚ü® sym (hlp4 x a) ‚ü©
                (- x) + (x + a) 
                                ‚â°‚ü® cong‚ÇÇ (_+_) refl hlp1 ‚ü© 
                ((- x)) + (x + b) 
                                ‚â°‚ü® hlp4 x b ‚ü© 
                b  ‚àé


  a=b‚Üíx+a=x+b :   (x a b : M ) ‚Üí  a ‚â° b ‚Üí  x + a ‚â° x + b 
  a=b‚Üíx+a=x+b  x a b p = cong‚ÇÇ (_+_ ) refl p
  a=b‚Üía+x=b+x :   (x a b : M ) ‚Üí  a ‚â° b ‚Üí  a + x ‚â° b + x 
  a=b‚Üía+x=b+x  x a b p = cong‚ÇÇ (_+_) p refl

  a+x=0=b+x‚Üía=b :  (x a b : M) ‚Üí  a + x ‚â° ùüò ‚Üí   b + x ‚â° ùüò ‚Üí a ‚â° b 
  a+x=0=b+x‚Üía=b  x a b h k = x+a=0=x+b‚Üía=b  x a b ((trans (+-comm  x a) h)) ((trans ((+-comm ) x b) k))
  x+a=x+b‚Üía+x=b+x :  (x a b : M ) ‚Üí  x + a ‚â°  x + b ‚Üí    a + x ‚â°  b + x 
  x+a=x+b‚Üía+x=b+x  x a b h = trans (trans (+-comm a x) h) (+-comm  x b)
  a+x=b+x‚Üíx+a=x+b :  (x a b : M ) ‚Üí  a + x ‚â° b + x ‚Üí   x + a ‚â°  x + b 
  a+x=b+x‚Üíx+a=x+b  x a b h = trans (trans (+-comm  x a) h) (+-comm  b x)
  a+x=b+x‚Üía=b :  (x a b : M ) ‚Üí a + x ‚â°   b + x  ‚Üí a ‚â° b 
  a+x=b+x‚Üía=b  x a b h = begin a  ‚â°‚ü® sym (hlp4 x a) ‚ü© ( (- x)) + ( x + a) ‚â°‚ü® cong‚ÇÇ  (_+_ ) refl (a+x=b+x‚Üíx+a=x+b x a b h) ‚ü© ( (- x))+ ( x + b) ‚â°‚ü® hlp4 x b ‚ü© b ‚àé
    where 
      hlp4 : (x a : M ) ‚Üí   ( (- x)) + (x + a) ‚â°  a
      hlp4 x a =  begin (- x) + (x + a)  ‚â°‚ü® sym((+-assoc ) (- x) x a) ‚ü© ((- x) + x) + a ‚â°‚ü® cong‚ÇÇ (_+_) ((-left ) x) refl ‚ü© ùüò + a ‚â°‚ü® œâ-left  a ‚ü© a ‚àé

  x+a=x+b‚Üía=b : (x a b : M) ‚Üí x + a ‚â°  x + b  ‚Üí a ‚â° b 
  x+a=x+b‚Üía=b  x a b h = a+x=b+x‚Üía=b  x a b (x+a=x+b‚Üía+x=b+x  x a b h )

  x+a=x‚Üía=0 :   (x a : M ) ‚Üí x + a ‚â° x ‚Üí a ‚â° ùüò
  x+a=x‚Üía=0  x a p with a=b‚Üíx+a=x+b  (- x) (x + a) x p  
  ... | res = begin a  ‚â°‚ü® sym ((œâ-left )a) ‚ü© ùüò + a ‚â°‚ü® cong‚ÇÇ (_+_ ) (sym ((-left ) x)) refl ‚ü© ((- x) + x) + a ‚â°‚ü® ((+-assoc ) (- x) x a) ‚ü©  (- x) + (x + a) ‚â°‚ü® trans res ((-left ) x) ‚ü© ùüò ‚àé 

  a+x=x‚Üía=0 :  (x a : M ) ‚Üí a + x ‚â° x ‚Üí a ‚â° ùüò
  a+x=x‚Üía=0  x a p = x+a=x‚Üía=0  x a (trans ((+-comm) x a)  p)

-- ‚â¢e‚Çä-irrelevant : ‚àÄ {A} {a : M A} ‚Üí (p q : ¬¨ (a ‚â° (e‚Çä A))) ‚Üí p ‚â° q
-- ‚â¢e‚Çä-irrelevant p q = fun-ext (Œª r ‚Üí ‚ä•-elim (p r))

-- data NonZeroPoly (A : Ring): Set where 
--   ld : (a : M A)  ‚Üí ¬¨ (a ‚â° (e‚Çä A)) ‚Üí  NonZeroPoly A
--   _‚à∑‚Çö_ : (M A)  ‚Üí NonZeroPoly A -> NonZeroPoly A

-- data Poly  (A : Ring): Set where 
--   0‚Çö : Poly A
--   non0‚Çö : NonZeroPoly A ‚Üí Poly A


-- data sum-zero {A : Ring} :  (p q : NonZeroPoly A) ‚Üí Set where 
--   ld0 : (a b : M A) ‚Üí (pa : ¬¨ (a ‚â° (e‚Çä A))) ‚Üí (pb : ¬¨ (b ‚â° (e‚Çä A))) ‚Üí ((_+·µ£_ A) a b) ‚â° (e‚Çä A) ‚Üí sum-zero (ld a pa) (ld b pb)
--   ‚à∑0  : (a b : M A) ‚Üí (p q : NonZeroPoly A) ‚Üí ((_+·µ£_ A) a b) ‚â° (e‚Çä A) ‚Üí sum-zero p q ‚Üí sum-zero (a ‚à∑‚Çö p) (b ‚à∑‚Çö q)

-- -- data sum-zero-Poly {A : Ring}  :  (p q : Poly A) ‚Üí Set where 
--   -- 0‚Çö-‚â° : sum-zero-Poly 0‚Çö 0‚Çö
--   -- n0‚Çö-‚â° : (p q : NonZeroPoly A) ‚Üí (sum-zero p q) ‚Üí  sum-zero-Poly  (non0‚Çö p) (non0‚Çö q)

-- data sum-nonzero {A : Ring} :  (p q : NonZeroPoly A) ‚Üí Set where 
--   ldld : (a b : M A) ‚Üí (pab : ¬¨ ((_+·µ£_ A) a b  ‚â° (e‚Çä A))) ‚Üí (pa : ¬¨ (a ‚â° (e‚Çä A))) ‚Üí (pb : ¬¨ (b ‚â° (e‚Çä A))) ‚Üí sum-nonzero (ld a pa) (ld b pb) 
--   ‚à∑ld  : (a b : M A) ‚Üí (pb : ¬¨ (b ‚â° (e‚Çä A))) ‚Üí (p : NonZeroPoly A)  ‚Üí sum-nonzero (a ‚à∑‚Çö p) (ld b pb) 
--   ld‚à∑  : (a b : M A) ‚Üí (pa : ¬¨ (a ‚â° (e‚Çä A))) ‚Üí (q : NonZeroPoly A)  ‚Üí sum-nonzero (ld a pa) (b ‚à∑‚Çö q)
--   ‚à∑‚à∑rek  : (a b : M A)  ‚Üí (p q : NonZeroPoly A) ‚Üí sum-nonzero p q ‚Üí sum-nonzero (a ‚à∑‚Çö p) (b ‚à∑‚Çö q)
--   ‚à∑‚à∑lok  : (a b : M A)  ‚Üí (p q : NonZeroPoly A) ‚Üí (pab : ¬¨ ((_+·µ£_ A) a b  ‚â° (e‚Çä A))) ‚Üí sum-nonzero (a ‚à∑‚Çö p) (b ‚à∑‚Çö q)

-- addp2 : {A : Ring} ‚Üí (p q : NonZeroPoly A) ‚Üí (NonZeroPoly A)  ‚äé (sum-zero p q)
-- addp2 {A} (ld ha pa) (ld hb pb) with ((dec A) ((_+·µ£_ A) ha  hb) (e‚Çä A) )
-- ... | yes x = inj‚ÇÇ (ld0 ha hb pa pb x)
-- ... | no x = inj‚ÇÅ ( ld  ((_+·µ£_ A) ha  hb) x)
-- addp2 {A} (ld ha pa) (hb ‚à∑‚Çö tb) = inj‚ÇÅ (((_+·µ£_ A) ha  hb) ‚à∑‚Çö tb)
-- addp2 {A} (ha ‚à∑‚Çö ta) (ld hb pb) = inj‚ÇÅ (((_+·µ£_ A) ha  hb) ‚à∑‚Çö ta)
-- addp2 {A} (ha ‚à∑‚Çö ta) (hb ‚à∑‚Çö tb) with (addp2 ta tb) | ((dec A) ((_+·µ£_ A) ha  hb) (e‚Çä A) )
-- ... | inj‚ÇÅ x | res2 = inj‚ÇÅ( ((_+·µ£_ A) ha  hb) ‚à∑‚Çö x)
-- ... | inj‚ÇÇ y | yes p = inj‚ÇÇ (‚à∑0 ha hb ta tb p y)
-- ... | inj‚ÇÇ y | no p = inj‚ÇÅ (ld ((_+·µ£_ A) ha  hb) p) 

-- -- ce ne gre dodaj da vrne nonzero ali pa dokaz da se vsi naprej sestejejo v 0
-- addp : {A : Ring} ‚Üí (x y : NonZeroPoly A) ‚Üí Maybe (NonZeroPoly A)
-- addp {A} (ld ha pa) (ld hb pb) with ((dec A) ((_+·µ£_ A) ha  hb) (e‚Çä A) )
-- ...     | yes p = nothing  --vsota je 0
-- ...     | no p = just (ld ((_+·µ£_ A) ha  hb) p) 
-- addp {A} (ld ha p) (hb ‚à∑‚Çö tb) = just (((_+·µ£_ A) ha  hb) ‚à∑‚Çö tb)
-- addp (ha ‚à∑‚Çö ta) (ld b x) = addp (ld b x) (ha ‚à∑‚Çö ta)
-- addp {A} (ha ‚à∑‚Çö ta) (hb ‚à∑‚Çö tb) with (addp ta tb) 
-- ...     | just res = just (((_+·µ£_ A) ha  hb) ‚à∑‚Çö res)
-- ...     | nothing with ((dec A) ((_+·µ£_ A) ha  hb) (e‚Çä A))
-- ...               | yes p = nothing
-- ...               | no p = just (ld ((_+·µ£_ A) ha  hb) p)

-- a+b=b+a=e : {A : Ring} ‚Üí (a b : M A) ‚Üí (A +·µ£ a) b ‚â° e‚Çä A ‚Üí (A +·µ£ b) a ‚â° e‚Çä A
-- a+b=b+a=e {A} a b p = begin (A +·µ£ b) a   ‚â°‚ü® (+-comm A) b a ‚ü© (A +·µ£ a) b ‚â°‚ü® p ‚ü© e‚Çä A ‚àé
-- justnoth‚ä• : {X : Set}{x : X} ‚Üí  nothing ‚â° just x ‚Üí ‚ä•
-- justnoth‚ä• ()


-- addp-comm : {A : Ring} ‚Üí (p q : NonZeroPoly A) ‚Üí addp p q ‚â° addp q p 
-- addp-comm {A} (ld a x) (ld b y) with ( dec A ((A +·µ£ a) b) (e‚Çä A)) | inspect ( dec A ((A +·µ£ a) b) ) (e‚Çä A)
-- ... | no p | [ eq ] with dec A ((A +·µ£ b) a) (e‚Çä A)
-- ... | no p2 =  cong just (dcong‚ÇÇ ld (((+-comm A) a b)) refl) --cong just (dcong‚ÇÇ ld ((+-comm A) a b) refl)
-- ... | yes p2 with p (a+b=b+a=e {A} b a p2 )
-- ... | ()
-- addp-comm {A} (ld a x) (ld b y) | yes p | [ eq ] with ( dec A ((A +·µ£ b) a) (e‚Çä A)) | inspect ( dec A ((A +·µ£ b) a) ) (e‚Çä A)
-- ... | yes x‚ÇÅ | [ eq‚ÇÅ ] = refl
-- ... | no p2 | [ eq‚ÇÅ ] with ¬¨-elim p2 (a+b=b+a=e {A} a b p)
-- ... | ()
-- addp-comm {A} (ld a x) (x‚ÇÅ ‚à∑‚Çö q) = cong just refl
-- addp-comm {A} (x ‚à∑‚Çö p) (ld a x‚ÇÅ) = cong just refl
-- addp-comm {A} (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) with addp p q | inspect (addp p) q | addp q p | inspect (addp q) p
-- ... | just x | [ eq ] | just y | [ eq2 ] = cong just (cong‚ÇÇ _‚à∑‚Çö_ ((+-comm A) a b) (hlp (x=yjust  eq2 eq)))
--   where 
--     x=yjust : addp q p ‚â° just y ‚Üí addp p q ‚â° just x ‚Üí just x ‚â° just y 
--     x=yjust p1 p2 = begin just x   ‚â°‚ü® sym p2 ‚ü© addp p q ‚â°‚ü® addp-comm p q ‚ü© addp q p ‚â°‚ü® p1 ‚ü© just y ‚àé
--     hlp : just x ‚â° just y ‚Üí x ‚â° y 
--     hlp refl = refl

-- ... | just x‚ÇÇ | [ eq ] | nothing | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym eq‚ÇÅ) (trans  (addp-comm q p) eq))
-- ... | ()
-- addp-comm {A} (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | just x | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym  eq) (trans (addp-comm p q) eq‚ÇÅ))
-- ... | ()
-- addp-comm {A} (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] with ( dec A ((A +·µ£ b) a) (e‚Çä A)) |  ( dec A ((A +·µ£ a) b) (e‚Çä A))
-- ... | yes x | yes x‚ÇÅ = refl
-- ... | yes x | no y  with ¬¨-elim y (a+b=b+a=e {A} b a  x)
-- ... | () 
-- addp-comm {A} (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] | no x | yes y with ¬¨-elim x (a+b=b+a=e {A}  a b  y)
-- ... | ()
-- addp-comm {A} (a ‚à∑‚Çö p) (b ‚à∑‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] | no x | no y = cong just (dcong‚ÇÇ ld ((+-comm A) a b) refl)



-- _+‚Çö_ : {A : Ring} ‚Üí (a : Poly A )‚Üí (b : Poly A) ‚Üí Poly A
-- 0‚Çö +‚Çö b = b
-- non0‚Çö x +‚Çö 0‚Çö = non0‚Çö x
-- non0‚Çö x +‚Çö non0‚Çö y with addp x y 
-- ... | just res = non0‚Çö res
-- ... | nothing = 0‚Çö


-- +‚Çö-comm :  {A : Ring} ‚Üí (p q : Poly A ) ‚Üí p +‚Çö q ‚â° q +‚Çö p 
-- +‚Çö-comm {A} 0‚Çö 0‚Çö = refl
-- +‚Çö-comm {A} 0‚Çö (non0‚Çö x) = refl
-- +‚Çö-comm {A} (non0‚Çö x) 0‚Çö = refl
-- +‚Çö-comm {A} (non0‚Çö p) (non0‚Çö q) with addp p q | inspect (addp p) q | addp q p | inspect (addp q) p
-- ... | just x | [ eq ] | just y | [ eq‚ÇÅ ] = cong non0‚Çö (hlp (x=yjust eq‚ÇÅ eq))
--   where 
--     x=yjust : addp q p ‚â° just y ‚Üí addp p q ‚â° just x ‚Üí just x ‚â° just y 
--     x=yjust p1 p2 = begin just x   ‚â°‚ü® sym p2 ‚ü© addp p q ‚â°‚ü® addp-comm p q ‚ü© addp q p ‚â°‚ü® p1 ‚ü© just y ‚àé
--     hlp : just x ‚â° just y ‚Üí x ‚â° y 
--     hlp refl = refl
-- ... | just x | [ eq ] | nothing | [ eq‚ÇÅ ] with justnoth‚ä• (trans (sym eq‚ÇÅ) (trans (addp-comm q p) eq))
-- ... | ()
-- +‚Çö-comm {A} (non0‚Çö p) (non0‚Çö q) | nothing | [ eq ] | just y | [ eq‚ÇÅ ] with justnoth‚ä• (sym (trans (sym eq‚ÇÅ) (trans (addp-comm q p) eq)))
-- ... | ()
-- +‚Çö-comm {A} (non0‚Çö p) (non0‚Çö q) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] = refl




-- --  /////////////////////
-- ‚à∑‚Çö-injh : {A : Ring} ‚Üí ‚àÄ {a b : M A} ‚Üí ‚àÄ {c d : NonZeroPoly A} ‚Üí (a ‚à∑‚Çö c) ‚â° (b ‚à∑‚Çö d) ‚Üí  a ‚â° b 
-- ‚à∑‚Çö-injh refl = refl
-- ‚à∑‚Çö-injt : {A : Ring} ‚Üí ‚àÄ {a b : M A} ‚Üí ‚àÄ {c d : NonZeroPoly A} ‚Üí (a ‚à∑‚Çö c) ‚â° (b ‚à∑‚Çö d) ‚Üí  c ‚â° d 
-- ‚à∑‚Çö-injt refl = refl
-- ld-inj : {A : Ring} ‚Üí  ‚àÄ {a b : M A} ‚Üí ‚àÄ {c d} ‚Üí (ld {A} a c) ‚â° (ld b d) ‚Üí a ‚â° b
-- ld-inj refl = refl
-- ‚à∑‚Çö-‚â° : {A : Ring} ‚Üí {a b : M A} ‚Üí ‚àÄ {c d : NonZeroPoly A} ‚Üí a ‚â° b ‚Üí c ‚â° d  ‚Üí (a ‚à∑‚Çö c) ‚â° (b ‚à∑‚Çö d)
-- ‚à∑‚Çö-‚â° {A} refl refl = refl 
-- ld-‚â° : {A : Ring} ‚Üí ‚àÄ {a b : M A} ‚Üí ‚àÄ {c d} ‚Üí a ‚â° b ‚Üí (ld {A} a c) ‚â° (ld b d)
-- ld-‚â° {A}{a}{b}{c}{d} p with (dec A) a (e‚Çä A)
-- ld-‚â° {A} {.(e‚Çä A)} {.(e‚Çä A)} {c} {d} refl | yes refl = refl
-- ld-‚â° {A} {a} {.a} {c} {d} refl | no x = refl
-- -- ‚â¢e‚Çä-irrelevant : ‚àÄ {A} {a : M A} ‚Üí (p q : ¬¨ (a ‚â° (e‚Çä A))) ‚Üí p ‚â° q
-- -- ‚â¢e‚Çä-irrelevant p q = fun-ext (Œª r ‚Üí ‚ä•-elim (p r))



-- ldtl‚ä• : {A : Ring} ‚Üí  (p q : NonZeroPoly A) ‚Üí addp p q  ‚â°  just p ‚Üí ‚ä•
-- ldtl‚ä• {A} (ld a x) (ld a‚ÇÅ x‚ÇÅ) r with dec A ((A +·µ£ a) a‚ÇÅ) (e‚Çä A)
-- ... | no x‚ÇÇ with x‚ÇÅ (x+a=x‚Üía=0{A} a a‚ÇÅ (ld-inj (just-injective r)))
-- ... | ()
-- ldtl‚ä• {A} (x ‚à∑‚Çö p) (ld a x‚ÇÅ) r  with ¬¨-elim x‚ÇÅ (a+x=x‚Üía=0 {A} x a (‚à∑‚Çö-injh (just-injective r)) )
-- ... | ()
-- ldtl‚ä• {A} (x ‚à∑‚Çö p) (x‚ÇÅ ‚à∑‚Çö q) r with addp p q | inspect (addp p ) q  
-- ... | just x‚ÇÇ | [ eq ] with   (‚à∑‚Çö-injt (just-injective r))
-- ... | res rewrite res with ldtl‚ä• p q eq 
-- ... | () 

-- ldtl‚ä• {A} (x ‚à∑‚Çö p) (x‚ÇÅ ‚à∑‚Çö q) r | nothing | [ eq ] with dec A ((A +·µ£ x) x‚ÇÅ) (e‚Çä A)
-- ldtl‚ä• {A} (x ‚à∑‚Çö p) (x‚ÇÅ ‚à∑‚Çö q) () | nothing | [ eq ] | yes x‚ÇÇ
-- ... | no x‚ÇÇ with just-injective r 
-- ... | () 

-- ldtl‚ä•sym : {A : Ring} ‚Üí  (p q : NonZeroPoly A) ‚Üí addp q p  ‚â°  just p ‚Üí ‚ä•
-- ldtl‚ä•sym p q r with ldtl‚ä• p q (trans (addp-comm p q) r)
-- ... | ()


-- addpinj : {A : Ring} ‚Üí (p q r : NonZeroPoly A) ‚Üí addp q p ‚â° addp r p  ‚Üí q ‚â° r 
-- addpinj {A} (ld a pa) (ld b pb) (ld c pc) h with (dec A) ((A +·µ£ b) a) (e‚Çä A)  | (dec A) ((A +·µ£ c) a) (e‚Çä A) 
-- ... | yes x | yes x‚ÇÅ = dcong‚ÇÇ ld (a+x=0=b+x‚Üía=b {A} a b c x x‚ÇÅ) refl
-- ... | no x | no x‚ÇÅ = dcong‚ÇÇ ld (a+x=b+x‚Üía=b {A} a b c (ld-inj hlp)) refl
--   where
--     hlp :  (ld ((A +·µ£ b) a) x) ‚â°  (ld ((A +·µ£ c) a) x‚ÇÅ)
--     hlp = just-injective h
    
-- addpinj {A} (ld a pa) (ld b pb) (c ‚à∑‚Çö tc) h with dec A ((A +·µ£ b) a) (e‚Çä A)
-- addpinj {A} (ld a pa) (ld b pb) (c ‚à∑‚Çö tc) () | yes x
-- addpinj {A} (ld a pa) (ld b pb) (c ‚à∑‚Çö tc) () | no x
-- addpinj {A} (ld a pa) (b ‚à∑‚Çö tb) (ld c pc) h with dec A ((A +·µ£ c) a) (e‚Çä A) 
-- addpinj {A} (ld a pa) (b ‚à∑‚Çö tb) (ld c pc) () | yes x‚ÇÅ
-- addpinj {A} (ld a pa) (b ‚à∑‚Çö tb) (ld c pc) () | no x‚ÇÅ
-- addpinj {A} (ld a pa) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h = ‚à∑‚Çö-‚â° headeq tleq
--   where 
--     headeq :  b  ‚â° c
--     headeq  = x+a=x+b‚Üía=b {A} a b c (‚à∑‚Çö-injh (just-injective h))
--     tleq : tb  ‚â° tc 
--     tleq  = ‚à∑‚Çö-injt (just-injective h)
-- addpinj {A} (a ‚à∑‚Çö ta) (ld b pb) (ld c pc) h = ld-‚â° (a+x=b+x‚Üía=b {A} a b c (‚à∑‚Çö-injh (just-injective h)))
-- addpinj {A} (a ‚à∑‚Çö ta) (ld b pb) (hc ‚à∑‚Çö tc) h with addp tc ta | inspect (addp tc) ta
-- ... | just tc+ta | [ eq ] with (‚à∑‚Çö-injt(just-injective h))
-- ... | res rewrite res with ldtl‚ä•sym  tc+ta tc eq
-- ... | ()
-- addpinj {A} (a ‚à∑‚Çö ta) (ld b pb) (hc ‚à∑‚Çö tc) h | nothing | [ eq ] with dec A ((A +·µ£ hc) a) (e‚Çä A)
-- addpinj {A} (a ‚à∑‚Çö ta) (ld b pb) (hc ‚à∑‚Çö tc) () | nothing | [ eq ] | yes x
-- addpinj {A} (a ‚à∑‚Çö ta) (ld b pb) (hc ‚à∑‚Çö tc) () | nothing | [ eq ] | no x
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) h with addp tb ta | inspect (addp tb) ta
-- ... | just tb+ta | [ eq ] with (‚à∑‚Çö-injt(just-injective h))
-- ... | res rewrite res  with ldtl‚ä•sym  ta tb eq 
-- ... | ()
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) h | nothing | [ eq ] with dec A ((A +·µ£ b) a) (e‚Çä A) 
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) () | nothing | [ eq ] | yes x
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (ld c pc) () | nothing | [ eq ] | no x
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h with addp tb ta | inspect (addp tb) ta | addp tc ta | inspect (addp tc) ta  
-- ... | just x | [ eq ] | just y | [ eq‚ÇÅ ] = ‚à∑‚Çö-‚â° hlp2 hlp
--   where 
--     hlp2 : b ‚â° c 
--     hlp2 = a+x=b+x‚Üía=b {A}a b c (‚à∑‚Çö-injh (just-injective h))
--     hlp3 : x ‚â° y 
--     hlp3 = (‚à∑‚Çö-injt (just-injective h))
--     hlp4 : x ‚â° y ‚Üí just x ‚â° just y
--     hlp4 refl = refl
--     hlp : tb ‚â° tc 
--     hlp = addpinj ta tb tc (trans eq (trans (hlp4 hlp3)(sym eq‚ÇÅ)) )
-- ... | just x | [ eq ] | nothing | [ eq‚ÇÅ ] with dec A  ((A +·µ£ c) a) (e‚Çä A)
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | just x | [ eq ] | nothing | [ eq‚ÇÅ ] | yes x‚ÇÅ
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | just x | [ eq ] | nothing | [ eq‚ÇÅ ] | no x‚ÇÅ
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h | nothing | [ eq ] | just x | [ eq‚ÇÅ ] with dec A  ((A +·µ£ b) a) (e‚Çä A)
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | nothing | [ eq ] | just x | [ eq‚ÇÅ ] | yes x‚ÇÅ
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) () | nothing | [ eq ] | just x | [ eq‚ÇÅ ] | no x‚ÇÅ
-- addpinj {A} (a ‚à∑‚Çö ta) (b ‚à∑‚Çö tb) (c ‚à∑‚Çö tc) h | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] with dec A ((A +·µ£ b) a) (e‚Çä A) | dec A ((A +·µ£ c) a) (e‚Çä A)
-- ... | yes x | yes x‚ÇÅ = ‚à∑‚Çö-‚â° hlp2 (sym hlp)
--   where   
--     hlp2 : b ‚â° c 
--     hlp2 = a+x=0=b+x‚Üía=b {A}a b c x x‚ÇÅ
--     hlp : tc ‚â° tb 
--     hlp = addpinj ta tc tb (trans eq‚ÇÅ  (sym eq))
-- ... | no x | no x‚ÇÅ = ‚à∑‚Çö-‚â° hlp2 (sym hlp)
--   where   
--     hlp2 : b ‚â° c 
--     hlp2 = (a+x=b+x‚Üía=b {A} a b c  (ld-inj (just-injective  h)))
--     hlp : tc ‚â° tb 
--     hlp = addpinj ta tc tb (trans eq‚ÇÅ  (sym eq))
  




-- n0‚Üín0 : {A : Ring} ‚Üí (a : M A) ‚Üí ¬¨ (a ‚â° e‚Çä A) ‚Üí ¬¨ ((-·µ£ A) a ‚â° e‚Çä A) 
-- n0‚Üín0 {A} a = contraposition (hlphlp {A} a)
--   where 
--     hlphlp : {A : Ring} ‚Üí (a : M A) ‚Üí ((-·µ£ A) a ‚â° e‚Çä A) ‚Üí (a ‚â° e‚Çä A) 
--     hlphlp {A} a p = trans (sym (trans((a=b‚Üía+x=b+x {A} a ((-·µ£ A) a) (e‚Çä A) p)) ((œâ-left A) a)))  ((-·µ£-left A) a)

-- -‚Çöh : {A : Ring} ‚Üí (p : NonZeroPoly A) ‚Üí ( NonZeroPoly A)
-- -‚Çöh {A} (ld a x) = ld ((-·µ£_ A) a)  (n0‚Üín0 {A} a x)
-- -‚Çöh {A} (x ‚à∑‚Çö p) = ((-·µ£_ A) x) ‚à∑‚Çö (-‚Çöh p)

-- -‚Çö : {A : Ring} ‚Üí (p : Poly A) ‚Üí ( Poly A)
-- -‚Çö {A} 0‚Çö = 0‚Çö
-- -‚Çö {A} (non0‚Çö p) = non0‚Çö (-‚Çöh p)


-- -‚Çöh-empt : {A : Ring}‚Üí (p : NonZeroPoly A) ‚Üí addp (-‚Çöh p) p ‚â° nothing
-- -‚Çöh-empt {A} (ld a x) with dec A ((A +·µ£ (-·µ£ A) a) a) (e‚Çä A)
-- ... | yes x‚ÇÅ = refl
-- ... | no x‚ÇÅ with ¬¨-elim  x‚ÇÅ ((-·µ£-left A) a) 
-- ... | () 
-- -‚Çöh-empt {A} (x ‚à∑‚Çö p) with -‚Çöh-empt p  | addp (-‚Çöh p) p | inspect (addp (-‚Çöh p)) p
-- ... | h | nothing | [ i ] with dec A ((A +·µ£ (-·µ£ A) x) x) (e‚Çä A)
-- ... | yes x‚ÇÅ = refl
-- ... | no x‚ÇÅ with ¬¨-elim  x‚ÇÅ ((-·µ£-left A) x) 
-- ... | ()
-- -‚Çöh-empt {A} (x ‚à∑‚Çö p) | h | just x‚ÇÅ | [ i ] with justnoth‚ä• (trans (sym h) i)
-- ... | ()

-- -‚Çö-left  : {A : Ring}‚Üí (p : Poly A) ‚Üí (-‚Çö p) +‚Çö p ‚â° 0‚Çö
-- -‚Çö-left {A} 0‚Çö = refl
-- -‚Çö-left {A} (non0‚Çö x) with addp (-‚Çöh x) x | inspect (addp (-‚Çöh x)) x
-- ... | just p | [ i ] with justnoth‚ä• (sym(trans (sym i) (-‚Çöh-empt x )) )
-- ... | ()
-- -‚Çö-left {A} (non0‚Çö x)  | nothing | [ i ] = refl

 


-- +‚Çö-asoc : {A : Ring} ‚Üí (p q r : Poly A) ‚Üí p +‚Çö (q +‚Çö r) ‚â° (p +‚Çö q) +‚Çö r
-- +‚Çö-asoc 0‚Çö 0‚Çö 0‚Çö = refl
-- +‚Çö-asoc 0‚Çö 0‚Çö (non0‚Çö x) = refl
-- +‚Çö-asoc 0‚Çö (non0‚Çö x) r = refl
-- +‚Çö-asoc (non0‚Çö x) 0‚Çö r = refl
-- +‚Çö-asoc (non0‚Çö p) (non0‚Çö q) 0‚Çö = begin (non0‚Çö p +‚Çö (non0‚Çö q +‚Çö 0‚Çö))   ‚â°‚ü® refl ‚ü© (0‚Çö +‚Çö (non0‚Çö p +‚Çö non0‚Çö q)) ‚â°‚ü® +‚Çö-comm 0‚Çö (non0‚Çö p +‚Çö non0‚Çö q) ‚ü© ((non0‚Çö p +‚Çö non0‚Çö q) +‚Çö 0‚Çö) ‚àé
-- +‚Çö-asoc {A} (non0‚Çö p) (non0‚Çö q) (non0‚Çö r) with addp q r | inspect (addp q) r | addp p q | inspect (addp p) q
-- ... | just q+r | [ eq ] | just p+q | [ eq‚ÇÅ ]  with addp p q+r | inspect (addp p) q+r | addp p+q r | inspect (addp p+q) r 
-- ... | just p+q$+r | [ eq‚ÇÇ ] | just p+$q+r | [ eq‚ÇÉ ] = {!   !}
-- ... | just x‚ÇÅ | [ eq‚ÇÇ ] | nothing | [ eq‚ÇÉ ] = {!   !}
-- ... | nothing | [ eq‚ÇÇ ] | a2 | [ eq‚ÇÉ ] = {!   !}
-- +‚Çö-asoc {A} (non0‚Çö p) (non0‚Çö q) (non0‚Çö r) | just x | [ eq ] | nothing | [ eq‚ÇÅ ] = {!   !}
-- +‚Çö-asoc {A} (non0‚Çö p) (non0‚Çö q) (non0‚Çö r) | nothing | [ eq ] | just y | [ eq‚ÇÅ ]  with addp y r | inspect (addp y) r 
-- ... | just x | [ eq‚ÇÇ ] = {!  !}
-- ... | nothing | [ eq‚ÇÇ ] with addpinj r   q y (trans eq (sym eq‚ÇÇ))
-- ... | res rewrite res with ldtl‚ä•sym y p  eq‚ÇÅ
-- ... | ()
-- +‚Çö-asoc {A} (non0‚Çö p) (non0‚Çö q) (non0‚Çö r) | nothing | [ eq ] | nothing | [ eq‚ÇÅ ] = cong non0‚Çö (addpinj q p r (trans ( trans eq‚ÇÅ (sym eq) ) (addp-comm q r)))
--   where 
--     hlp2 : (addp p q ‚â° nothing) ‚Üí (addp q r ‚â° nothing) ‚Üí addp p q ‚â° addp r q 
--     hlp2 h k = trans h (sym (trans (addp-comm r q) k))

--     -- addpinj : {A : Ring} ‚Üí (p q r : NonZeroPoly A) ‚Üí addp q p ‚â° addp r p  ‚Üí q ‚â° r 
 